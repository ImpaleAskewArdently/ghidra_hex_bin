{
  "name": "UnlimitedByteProviderWrapper",
  "comment": "A ByteProvider constrained to a sub-section of an existing ByteProvider\n although reads beyond the specified sub-section are permitted but will return zero byte\n values.  The methods #length() and #getInputStream(long) remain\n bounded by the specified sub-section.",
  "javadoc": "A {@link ByteProvider} constrained to a sub-section of an existing {@link ByteProvider}\n although reads beyond the specified sub-section are permitted but will return zero byte\n values.  The methods {@link #length()} and {@link #getInputStream(long)} remain\n bounded by the specified sub-section.",
  "static": false,
  "implements": [],
  "extends": "ghidra.app.util.bin.ByteProviderWrapper",
  "fields": [],
  "methods": [
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates a wrapper around a ByteProvider that contains the same bytes as the specified\n provider.\n ",
      "javadoc": "Creates a wrapper around a {@link ByteProvider} that contains the same bytes as the specified\n provider.\n \u003cp\u003e\n@param provider {@link ByteProvider} to wrap\n@throws IOException if error",
      "static": false,
      "params": [
        {
          "name": "provider",
          "type_long": "ghidra.app.util.bin.ByteProvider",
          "type_short": "ByteProvider",
          "comment": "ByteProvider to wrap"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if error"
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Creates a wrapper around a ByteProvider that contains the same bytes as the specified\n provider, but with a new FSRL identity.\n ",
      "javadoc": "Creates a wrapper around a {@link ByteProvider} that contains the same bytes as the specified\n provider, but with a new {@link FSRL} identity.\n \u003cp\u003e\n@param provider {@link ByteProvider} to wrap\n@param fsrl {@link FSRL} identity for the instance\n@throws IOException if error",
      "static": false,
      "params": [
        {
          "name": "provider",
          "type_long": "ghidra.app.util.bin.ByteProvider",
          "type_short": "ByteProvider",
          "comment": "ByteProvider to wrap"
        },
        {
          "name": "fsrl",
          "type_long": "ghidra.formats.gfilesystem.FSRL",
          "type_short": "FSRL",
          "comment": "FSRL identity for the instance"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": "if error"
        }
      ]
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a UnlimitedByteProviderWrapper around the specified ByteProvider,\n constrained to a subsection of the provider.",
      "javadoc": "Constructs a {@link UnlimitedByteProviderWrapper} around the specified {@link ByteProvider},\n constrained to a subsection of the provider.\n@param provider the {@link ByteProvider} to wrap\n@param subOffset the offset in the {@link ByteProvider} of where to start the new\n   {@link UnlimitedByteProviderWrapper}\n@param subLength the length of the new {@link UnlimitedByteProviderWrapper}",
      "static": false,
      "params": [
        {
          "name": "provider",
          "type_long": "ghidra.app.util.bin.ByteProvider",
          "type_short": "ByteProvider",
          "comment": "the ByteProvider to wrap"
        },
        {
          "name": "subOffset",
          "type_long": "long",
          "type_short": "long",
          "comment": "the offset in the ByteProvider of where to start the new\n   UnlimitedByteProviderWrapper"
        },
        {
          "name": "subLength",
          "type_long": "long",
          "type_short": "long",
          "comment": "the length of the new UnlimitedByteProviderWrapper"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "\u003cinit\u003e",
      "comment": "Constructs a UnlimitedByteProviderWrapper around the specified ByteProvider,\n constrained to a subsection of the provider.",
      "javadoc": "Constructs a {@link UnlimitedByteProviderWrapper} around the specified {@link ByteProvider},\n constrained to a subsection of the provider.\n@param provider the {@link ByteProvider} to wrap\n@param subOffset the offset in the {@link ByteProvider} of where to start the new\n   {@link UnlimitedByteProviderWrapper}\n@param subLength the length of the new {@link UnlimitedByteProviderWrapper}\n@param fsrl {@link FSRL} identity of the file this ByteProvider represents",
      "static": false,
      "params": [
        {
          "name": "provider",
          "type_long": "ghidra.app.util.bin.ByteProvider",
          "type_short": "ByteProvider",
          "comment": "the ByteProvider to wrap"
        },
        {
          "name": "subOffset",
          "type_long": "long",
          "type_short": "long",
          "comment": "the offset in the ByteProvider of where to start the new\n   UnlimitedByteProviderWrapper"
        },
        {
          "name": "subLength",
          "type_long": "long",
          "type_short": "long",
          "comment": "the length of the new UnlimitedByteProviderWrapper"
        },
        {
          "name": "fsrl",
          "type_long": "ghidra.formats.gfilesystem.FSRL",
          "type_short": "FSRL",
          "comment": "FSRL identity of the file this ByteProvider represents"
        }
      ],
      "return": {
        "type_long": "void",
        "type_short": "void",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "isValidIndex",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "boolean",
        "type_short": "boolean",
        "comment": ""
      },
      "throws": []
    },
    {
      "name": "readByte",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "byte",
        "type_short": "byte",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    },
    {
      "name": "readBytes",
      "comment": "",
      "javadoc": "",
      "static": false,
      "params": [
        {
          "name": "index",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        },
        {
          "name": "length",
          "type_long": "long",
          "type_short": "long",
          "comment": ""
        }
      ],
      "return": {
        "type_long": "byte[]",
        "type_short": "byte[]",
        "comment": ""
      },
      "throws": [
        {
          "type_long": "java.io.IOException",
          "type_short": "IOException",
          "comment": ""
        }
      ]
    }
  ]
}
